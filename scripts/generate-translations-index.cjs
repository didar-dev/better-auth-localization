// Auto-generates src/translations/index.ts by merging LOCALES from each translation file
// This file is not committed to git. Build and tests run this generator automatically.
// Run manually via: node scripts/generate-translations-index.cjs

const fs = require('fs');
const path = require('path');

const projectRoot = path.resolve(__dirname, '..');
const translationsDir = path.join(projectRoot, 'src', 'translations');
const outputFile = path.join(translationsDir, 'index.ts');

function main() {
  const files = fs
    .readdirSync(translationsDir, { withFileTypes: true })
    .filter((d) => d.isFile())
    .map((d) => d.name)
    .filter((name) => name.endsWith('.ts'))
    .filter((name) => name !== 'index.ts')
    .sort((a, b) => a.localeCompare(b));

  const entries = files.map((name) => {
    const base = name.replace(/\.ts$/, '');
    const varName = `LOCALES_${base.replace(/[^a-zA-Z0-9_$]/g, '_')}`;
    return { base, varName };
  });

  const header = [
    '// This file is AUTO-GENERATED by scripts/generate-translations-index.cjs. Do not edit manually.',
    "// To update, run: npm run generate:translations or pnpm generate:translations",
    '',
  ].join('\n');

  const imports = entries
    .map(({ base, varName }) => `import { LOCALES as ${varName} } from "./${base}";`)
    .join('\n');

  const body = [
    '',
    'export const defaultTranslations = {',
    ...entries.map(({ varName }) => `\t...${varName},`),
    '};',
    '',
  ].join('\n');

  const content = [header, imports, body].join('\n');
  fs.writeFileSync(outputFile, content, 'utf8');
  // eslint-disable-next-line no-console
  console.log(`Generated: ${path.relative(projectRoot, outputFile)}`);
}

main();


